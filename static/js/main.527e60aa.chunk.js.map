{"version":3,"sources":["components/header/Header.jsx","components/card/Card.jsx","components/card-list/CardList.jsx","components/search-box/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","text","className","Card","monster","alt","src","id","username","email","CardList","monsters","slice","map","searchBox","placeHolder","onChange","type","placeholder","App","useState","setMonsters","searchField","setSearchField","filteredMonsters","filter","toLowerCase","includes","useEffect","a","fetchMonsters","monstersFromJSONServer","getMonsters","fetch","res","json","data","SearchBox","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAUeA,EARA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChB,OACE,qBAAKC,UAAU,SAAf,SACE,6BAAKD,OCUIE,G,YAbF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACd,OACE,sBAAKF,UAAU,iBAAf,UACE,qBACEG,IAAI,UACJC,IAAG,+BAA0BF,EAAQG,GAAlC,4BAEL,6BAAKH,EAAQI,WACb,4BAAIJ,EAAQK,aCIHC,EAXE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAElB,OACE,qBAAKT,UAAU,YAAf,SACGS,EAASC,MAAM,EAAG,GAAGC,KAAI,SAACT,GAAD,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,UCOZO,G,MAbG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAChC,OACE,qBAAKd,UAAU,SAAf,SACE,uBACEA,UAAU,SACVe,KAAK,SACLC,YAAaH,EACbC,SAAUA,QC+BHG,MAnCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNT,EADM,KACIU,EADJ,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,KAIPC,EAAmBb,EAASc,QAAO,SAACrB,GAAD,OACvCA,EAAQI,SAASkB,cAAcC,SAASL,EAAYI,kBAGtDE,qBAAU,YACS,uCAAG,4BAAAC,EAAA,sEACmBC,IADnB,OACZC,EADY,OAElBV,EAAYU,GAFM,2CAAH,qDAIjBC,KACC,IAEH,IAAMF,EAAa,uCAAG,8BAAAD,EAAA,sEACFI,MAAM,8CADJ,cACdC,EADc,gBAEDA,EAAIC,OAFH,cAEdC,EAFc,yBAGbA,GAHa,2CAAH,qDAUnB,OACE,sBAAKlC,UAAU,MAAf,UACE,cAAC,EAAD,CAAQD,KAAK,uBACb,cAACoC,EAAD,CAAWrB,SAPM,SAACsB,GACpBf,EAAee,EAAEC,OAAOC,QAMazB,YAAY,qBAC/C,cAAC,EAAD,CAAUJ,SAAUa,QCvBXiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.527e60aa.chunk.js","sourcesContent":["import '../header/header.styles.css';\r\n\r\nconst Header = ({ text }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>{text}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import '../card/card.styles.css';\r\n\r\nconst Card = ({ monster }) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n      />\r\n      <h2>{monster.username}</h2>\r\n      <p>{monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import '../card-list/card-list.styles.css';\r\nimport Card from '../card/Card';\r\n\r\nconst CardList = ({ monsters }) => {\r\n  // console.log(props);\r\n  return (\r\n    <div className=\"card-list\">\r\n      {monsters.slice(0, 8).map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import './search-box.styles.css';\r\n\r\nconst searchBox = ({ placeHolder, onChange }) => {\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        className=\"search\"\r\n        type=\"search\"\r\n        placeholder={placeHolder}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default searchBox;\r\n","import { useState, useEffect } from 'react';\nimport Header from './components/header/Header';\nimport CardList from './components/card-list/CardList';\nimport SearchBox from './components/search-box/SearchBox';\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [searchField, setSearchField] = useState('');\n\n  const filteredMonsters = monsters.filter((monster) =>\n    monster.username.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  useEffect(() => {\n    const getMonsters = async () => {\n      const monstersFromJSONServer = await fetchMonsters();\n      setMonsters(monstersFromJSONServer);\n    };\n    getMonsters();\n  }, []);\n\n  const fetchMonsters = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/users');\n    const data = await res.json();\n    return data;\n  };\n\n  const handleChange = (e) => {\n    setSearchField(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header text=\"Monsters Rolodex 1\" />\n      <SearchBox onChange={handleChange} placeHolder=\"Search Monsters!\" />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}